// GitHub 的Jenkinsfile文件
pipeline {
  agent {
    node {
      label 'maven'
    }
  }

    parameters {
        string(name:'TAG_NAME',defaultValue: '',description:'')
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'dockerhub-id'
        GITHUB_CREDENTIAL_ID = 'github-id'
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'docker.io'
        DOCKERHUB_NAMESPACE = 'dragonzw' // Change me
        GITHUB_ACCOUNT = 'Dragon-zw'
        APP_NAME = 'devops-java-sample'
        SONAR_CREDENTIAL_ID = 'sonar-token'
    }
    
    stages { // 整个流水线的开始
        stage ('checkout scm') {
            steps {
                checkout(scm) // 拉取代码
            }
        }

        stage ('unit test') {
            steps {
                container ('maven') {
                    sh 'mvn clean  -gs `pwd`/configuration/settings.xml test' // 进行单元测试
                }
            }
        }

        stage('sonarqube analysis') { // 代码的静态代码扫描分析
          steps {
            container ('maven') {
              withCredentials([string(credentialsId: "$SONAR_CREDENTIAL_ID", variable: 'SONAR_TOKEN')]) {
                withSonarQubeEnv('sonar') {
                 sh "mvn sonar:sonar -gs `pwd`/configuration/settings.xml -Dsonar.login=$SONAR_TOKEN"
                }
              }
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }
 
        stage ('build & push') { // 代码的构建和Push镜像
            steps {
                container ('maven') {
                    sh 'mvn  -Dmaven.test.skip=true -gs `pwd`/configuration/settings.xml clean package'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    sh 'docker build -f Dockerfile-online -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                    withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "$DOCKER_CREDENTIAL_ID" ,)]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                        sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                    }
                }
            }
        }

        stage('push latest'){
          when{
            anyOf {
            branch 'master'; branch 'sonarqube'
            }
          }
          steps{
            container ('maven') {
              sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
              sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
            }
          }
        }

        stage('deploy to dev') { // 镜像通过 KubeSphere 流水线部署
          when{
            anyOf {
              branch 'master'; branch 'sonarqube'
            }
          }
          steps {
            input(id: 'deploy-to-dev', message: 'deploy to dev?')
            container("maven") {
              withCredentials([
                  kubeconfigFile(
                  credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                  variable: 'KUBECONFIG')
                  ]) {
                  sh '''
                    envsubst < deploy/dev-ol/devops-sample-svc.yaml | kubectl apply -f -
                    envsubst < deploy/dev-ol/devops-sample.yaml | kubectl apply -f -
                  '''
              }
            }
          }
        }
        stage('push with tag'){ // 审批的流程
          when{
            expression{
              return params.TAG_NAME =~ /v.*/
            }
          }
          steps {
            container ('maven') {
              input(id: 'release-image-with-tag', message: 'release image with tag?')
                withCredentials([usernamePassword(credentialsId: "$GITHUB_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                  sh 'git config --global user.email "kubesphere@yunify.com" '
                  sh 'git config --global user.name "kubesphere" '
                  sh 'git tag -a $TAG_NAME -m "$TAG_NAME" '
                  sh 'git push http://$GIT_USERNAME:$GIT_PASSWORD@github.com/$GITHUB_ACCOUNT/devops-java-sample.git --tags --ipv4'
                }
              sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME '
              sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME '
            }
          }
        }
        stage('deploy to production') {
          when{
            expression{
              return params.TAG_NAME =~ /v.*/
            }
          }
          steps {
            input(id: 'deploy-to-production', message: 'deploy to production?')
            container("maven") {
              withCredentials([
                  kubeconfigFile(
                  credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                  variable: 'KUBECONFIG')
                  ]) {
                  sh '''
                    envsubst < deploy/prod-ol/devops-sample-svc.yaml | kubectl apply -f -
                    envsubst < deploy/prod-ol/devops-sample.yaml | kubectl apply -f -
                  '''
              }
            }
          }
        }
    }
}
